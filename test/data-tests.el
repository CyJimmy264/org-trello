(require 'ert)
(require 'ert-expectations)
(require 'el-mock)

(expectations (desc "orgtrello-data/entity-*")
  (expect "test" (orgtrello-data/entity-buffername   (orgtrello-hash/make-properties `((:buffername   . "test")))))
  (expect nil (orgtrello-data/entity-buffername      (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-position     (orgtrello-hash/make-properties `((:position     . "test")))))
  (expect nil (orgtrello-data/entity-position        (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-id           (orgtrello-hash/make-properties `((:id           . "test")))))
  (expect nil (orgtrello-data/entity-id              (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-name         (orgtrello-hash/make-properties `((:name         . "test")))))
  (expect nil (orgtrello-data/entity-name            (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-list-id      (orgtrello-hash/make-properties `((:list-id      . "test")))))
  (expect nil (orgtrello-data/entity-list-id         (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-checklists   (orgtrello-hash/make-properties `((:checklists   . "test")))))
  (expect nil (orgtrello-data/entity-checklists      (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-items        (orgtrello-hash/make-properties `((:items        . "test")))))
  (expect nil (orgtrello-data/entity-items           (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-card-id      (orgtrello-hash/make-properties `((:card-id      . "test")))))
  (expect nil (orgtrello-data/entity-card-id         (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-due          (orgtrello-hash/make-properties `((:due          . "test")))))
  (expect nil (orgtrello-data/entity-due             (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-keyword      (orgtrello-hash/make-properties `((:keyword      . "test")))))
  (expect nil (orgtrello-data/entity-keyword         (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-closed       (orgtrello-hash/make-properties `((:closed       . "test")))))
  (expect nil (orgtrello-data/entity-closed          (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-callback     (orgtrello-hash/make-properties `((:callback     . "test")))))
  (expect nil (orgtrello-data/entity-callback        (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-sync         (orgtrello-hash/make-properties `((:sync         . "test")))))
  (expect nil (orgtrello-data/entity-sync            (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-level        (orgtrello-hash/make-properties `((:level        . "test")))))
  (expect nil (orgtrello-data/entity-level           (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-method       (orgtrello-hash/make-properties `((:method       . "test")))))
  (expect nil (orgtrello-data/entity-method          (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-uri          (orgtrello-hash/make-properties `((:uri          . "test")))))
  (expect nil (orgtrello-data/entity-uri             (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-params       (orgtrello-hash/make-properties `((:params       . "test")))))
  (expect nil (orgtrello-data/entity-params          (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-start        (orgtrello-hash/make-properties `((:start        . "test")))))
  (expect nil (orgtrello-data/entity-start           (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-action       (orgtrello-hash/make-properties `((:action       . "test")))))
  (expect nil (orgtrello-data/entity-action          (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-comments     (orgtrello-hash/make-properties `((:comments     . "test")))))
  (expect nil (orgtrello-data/entity-comments        (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-comment-id   (orgtrello-hash/make-properties `((:comment-id   . "test")))))
  (expect nil (orgtrello-data/entity-comment-id      (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-comment-text (orgtrello-hash/make-properties `((:comment-text . "test")))))
  (expect nil (orgtrello-data/entity-comment-text    (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-comment-user (orgtrello-hash/make-properties `((:comment-user . "test")))))
  (expect nil (orgtrello-data/entity-comment-user    (orgtrello-hash/make-properties `((inexistant    . "test")))))
  (expect "test" (orgtrello-data/entity-color        (orgtrello-hash/make-properties `((:color        . "test")))))
  (expect nil (orgtrello-data/entity-color           (orgtrello-hash/make-properties `((inexistant    . "test"))))))

(expectations (desc "orgtrello-data/entity-* - 2")
  (expect :some-method (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:method . :some-method )))))
  (expect nil (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:inexistant . :some-method )))))
  (expect :some-uri (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:method . :some-uri )))))
  (expect nil (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:inexistant . :some-method )))))
  (expect :some-sync (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:method . :some-sync )))))
  (expect nil (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:inexistant . :some-method )))))
  (expect :some-params (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:method . :some-params )))))
  (expect nil (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:inexistant . :some-method ))))))

(expectations (desc "orgtrello-data/--entity-with-level-p")
 (expect nil (orgtrello-data/--entity-with-level-p nil 1))
 (expect t   (orgtrello-data/--entity-with-level-p (orgtrello-hash/make-properties `((:level . ,*CARD-LEVEL*))) *CARD-LEVEL*))
 (expect nil (orgtrello-data/--entity-with-level-p (orgtrello-hash/make-properties `((:level . ,*CHECKLIST-LEVEL*))) *CARD-LEVEL*)))

(expectations (desc "orgtrello-data/entity-card-p")
 (expect t   (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((:level . ,*CARD-LEVEL*)))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((:level . ,*CHECKLIST-LEVEL*)))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((idList . 1)))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((id . 1)))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((:list-id . "this is a card")))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((anything-else . "this is not a card"))))))

(expectations (desc "orgtrello-data/entity-checklist-p")
 (expect t   (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((:level . ,*CHECKLIST-LEVEL*)))))
 (expect nil (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((:level . ,*ITEM-LEVEL*)))))
 (expect nil (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((idCard . 1)))))
 (expect nil (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((id . 1)))))
 (expect nil (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((:card-id . "this is a checklist")))))
 (expect nil (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((anything-else . "this is not a checklist"))))))

(expectations (desc "orgtrello-data/entity-item-p")
  (expect t   (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((:level . ,*ITEM-LEVEL*)))))
  (expect nil (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((:checked . "this is an item")))))
  (expect nil (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((anything-else . "this is not a item")))))
  (expect nil (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((:level . ,*CARD-LEVEL*)))))
  (expect nil (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((:state . 1)))))
  (expect nil (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((id . 1))))))

(expectations (desc "orgtrello-data/merge-2-lists-without-duplicates")
  (expect '(1 2 3 4) (orgtrello-data/merge-2-lists-without-duplicates '(1 2 3) '(4 1 2)))
  (expect '(4 1 2)   (orgtrello-data/merge-2-lists-without-duplicates nil '(4 1 2)))
  (expect '(4 1 2)   (orgtrello-data/merge-2-lists-without-duplicates '(4 1 2) nil))
  (expect nil        (orgtrello-data/merge-2-lists-without-duplicates nil nil)))

(expectations (desc "orgtrello-data/entity-card-p")
 (expect t (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((:level . ,*CARD-LEVEL*)))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((:level . ,*CHECKLIST-LEVEL*))))))

(expectations
  (expect "some-method" (orgtrello-data/gethash-data :method (orgtrello-hash/make-properties `((:method . "some-method")))))
  (expect nil           (orgtrello-data/gethash-data :method (orgtrello-hash/make-properties `((:inexistant . "some-method")))))
  (expect nil           (orgtrello-data/gethash-data :key nil))
  (expect :value        (orgtrello-data/gethash-data :key (orgtrello-hash/make-properties `((:key . :value)))))
  (expect nil           (orgtrello-data/gethash-data :key (orgtrello-hash/make-properties `((:other-key . :value)))))
  (expect nil           (orgtrello-data/gethash-data :key (orgtrello-hash/make-properties `((:key . nil))))))

(expectations (desc "orgtrello-data/--compute-level")
  (expect *CARD-LEVEL*      (orgtrello-data/--compute-level (orgtrello-hash/make-properties '((:list-id . 0)))))
  (expect *CHECKLIST-LEVEL* (orgtrello-data/--compute-level (orgtrello-hash/make-properties '((:card-id . 0)))))
  (expect *ITEM-LEVEL*      (orgtrello-data/--compute-level (orgtrello-hash/make-properties '((:checked . 0)))))
  (expect nil               (orgtrello-data/--compute-level (orgtrello-hash/make-properties '()))))

(ert-deftest testing-orgtrello-data/parse-data-card ()
  ;; check card
  (should (hash-equal (orgtrello-hash/make-properties `((:url . "https://trello.com/c/9XPLuJhi/2515-joy-of-fun-ctional-languages")
                                                        (:name . "Joy of FUN(ctional) LANGUAGES")
                                                        (:level . 1)
                                                        (:member-ids . (1 2 3))
                                                        (:checklists . (4 5 6))
                                                        (:list-id . "51d99bbc1e1d8988390047f3")
                                                        (:desc . "some-desc")
                                                        (:board-id . "51d99bbc1e1d8988390047f2")
                                                        (:closed . nil)
                                                        (:id . "52c09056d84eeca156001a24")
                                                        (:due . "some-due-date")
                                                        (:position . "98304")))

                      (orgtrello-data/parse-data '((url . "https://trello.com/c/9XPLuJhi/2515-joy-of-fun-ctional-languages")
                                                    (shortUrl . "https://trello.com/c/9XPLuJhi")
                                                    (pos . "98304")
                                                    (name . "Joy of FUN(ctional) LANGUAGES")
                                                    (manualCoverAttachment . :json-false)
                                                    (idAttachmentCover)
                                                    (idShort . 2515)
                                                    (idMembers . [1 2 3])
                                                    (idList . "51d99bbc1e1d8988390047f3")
                                                    (idChecklists . [4 5 6])
                                                    (idBoard . "51d99bbc1e1d8988390047f2")
                                                    (due . "some-due-date")
                                                    (descData (emoji))
                                                    (desc . "some-desc")
                                                    (dateLastActivity . "2013-12-29T21:12:54.164Z")
                                                    (closed . :json-false)
                                                    (checkItemStates . [])
                                                    (badges (due)
                                                            (description . :json-false)
                                                            (attachments . 0)
                                                            (comments . 0)
                                                            (checkItemsChecked . 0)
                                                            (checkItems . 0)
                                                            (fogbugz)
                                                            (subscribed . :json-false)
                                                            (viewingMemberVoted . :json-false)
                                                            (votes . 0))
                                                    (id . "52c09056d84eeca156001a24"))))))

(ert-deftest testing-orgtrello-data/parse-data-checklist ()
  ;; check checklist
  (should (hash-equal (orgtrello-hash/make-properties `((:items . ())
                                                        (:name . "LISP family")
                                                        (:level . 2)
                                                        (:id . "52c0a36886b7bdd67c008cf1")
                                                        (:card-id . "52c09056d84eeca156001a24")
                                                        (:board-id . "51d99bbc1e1d8988390047f2")
                                                        (:id . "52c0a36886b7bdd67c008cf1")
                                                        (:position . 16384)))
                      (orgtrello-data/parse-data '((checkItems . [])
                                                    (pos . 16384)
                                                    (idCard . "52c09056d84eeca156001a24")
                                                    (idBoard . "51d99bbc1e1d8988390047f2")
                                                    (name . "LISP family")
                                                    (id . "52c0a36886b7bdd67c008cf1"))))))

(ert-deftest testing-orgtrello-data/parse-data-item ()
  (should (hash-equal
           (orgtrello-hash/make-properties `((:name . "Emacs-Lisp")
                                             (:level . 3)
                                             (:id . "52c0a64cfb34123369015393")
                                             (:checked . "complete")
                                             (:position . 16384)))
           (orgtrello-data/parse-data '((pos . 16384)
                                         (nameData (emoji))
                                         (name . "Emacs-Lisp")
                                         (id . "52c0a64cfb34123369015393")
                                         (state . "complete")))))
  (should (hash-equal
           (orgtrello-hash/make-properties `((:name . "Emacs-Lisp")
                                             (:level . 3)
                                             (:id . "52c0a64cfb34123369015393")
                                             (:checked . "incomplete")
                                             (:position . 16384)))
           (orgtrello-data/parse-data '((pos . 16384)
                                         (nameData (emoji))
                                         (name . "Emacs-Lisp")
                                         (id . "52c0a64cfb34123369015393")
                                         (state . "incomplete"))))))

(ert-deftest testing-orgtrello-data/parse-data-http-response ()
  (should (hash-equal
           (orgtrello-hash/make-properties `((:status . ok)))
           (orgtrello-data/parse-data '((status . ok))))))

(ert-deftest testing-orgtrello-data/parse-data-with-list-of-results ()
  (let ((list-hash (orgtrello-data/parse-data '[((shortUrl . "https://trello.com/b/o9oY3NlQ")
                                                 (dateLastView . "2013-08-08T14:07:03.382Z")
                                                 (dateLastActivity)
                                                 (powerUps . [])
                                                 (subscribed . :json-false)
                                                 (shortLink . "o9oY3NlQ")
                                                 (invitations . [])
                                                 (prefs
                                                  (canInvite . t)
                                                  (canBePrivate . t)
                                                  (canBeOrg . t)
                                                  (canBePublic . t)
                                                  (bg . "blue")
                                                  (backgroundBrightness . "unknown")
                                                  (backgroundTile . :json-false)
                                                  (backgroundImageScaled)
                                                  (backgroundImage)
                                                  (backgroundColor . "#205C7E")
                                                  (cardCovers . t)
                                                  (selfJoin . :json-false)
                                                  (invitations . "members")
                                                  (comments . "members")
                                                  (voting . "disabled")
                                                  (permissionLevel . "private"))
                                                 (url . "https://trello.com/b/o9oY3NlQ/1-board-to-rule-them-all")
                                                 (pinned . t)
                                                 (invited . :json-false)
                                                 (idOrganization)
                                                 (closed . t)
                                                 (descData)
                                                 (desc . "")
                                                 (name . "1-board-to-rule-them-all")
                                                 (id . "5203a4fd0ac2f5b75c001d1d"))
                                                ((shortUrl . "https://trello.com/b/xzOJmxzy")
                                                 (dateLastView . "2013-04-15T09:58:13.992Z")
                                                 (dateLastActivity)
                                                 (powerUps .
                                                           [])
                                                 (subscribed . :json-false)
                                                 (shortLink . "xzOJmxzy")
                                                 (invitations . [])
                                                 (prefs
                                                  (canInvite . t)
                                                  (canBePrivate . t)
                                                  (canBeOrg . t)
                                                  (canBePublic . t)
                                                  (bg . "blue")
                                                  (backgroundBrightness . "unknown")
                                                  (backgroundTile . :json-false)
                                                  (backgroundImageScaled)
                                                  (backgroundImage)
                                                  (backgroundColor . "#205C7E")
                                                  (cardCovers . t)
                                                  (selfJoin . :json-false)
                                                  (invitations . "members")
                                                  (comments . "members")
                                                  (voting . "disabled")
                                                  (permissionLevel . "org"))
                                                 (url . "https://trello.com/b/xzOJmxzy/demandes-infra")
                                                 (pinned . t)
                                                 (invited . :json-false)
                                                 (idOrganization . "5044ce9d5371b0384813bba6")
                                                 (closed . t)
                                                 (descData)
                                                 (desc . "")
                                                 (name . "Demandes Infra")
                                                 (id . "50aa59502ddab2fc1100115b"))])))
    (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data
                                      (:url "https://trello.com/b/o9oY3NlQ/1-board-to-rule-them-all" :closed t :desc "" :name "1-board-to-rule-them-all" :id "5203a4fd0ac2f5b75c001d1d"))
                        (car list-hash)))
    (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data
                                      (:url "https://trello.com/b/xzOJmxzy/demandes-infra" :closed t :desc "" :name "Demandes Infra" :id "50aa59502ddab2fc1100115b"))
                        (cadr list-hash)))))

(expectations (desc "orgtrello-data/parse-data - with nested assoc list.")
              (defvar actual-result)
              (setq actual-result (orgtrello-data/parse-data '((checkItems . [((pos . 16384)
                                                                                (nameData)
                                                                                (name . "introduction")
                                                                                (id . "52c0b537ad469b9d6d044fa1")
                                                                                (state . "incomplete"))
                                                                               ((pos . 32768)
                                                                                (nameData)
                                                                                (name . "Ch. 1 - A scalable language")
                                                                                (id . "52c0b5386548fde20105ea4e")
                                                                                (state . "incomplete"))])
                                                                (idCard . "52c0b529bdbf2ab3770570b7")
                                                                (idBoard . "51d99bbc1e1d8988390047f2")
                                                                (name .  "chapters")
                                                                (id .  "52c0b52ece09f28f6801fe5e")
                                                                (level . 2))))
              (expect "52c0b529bdbf2ab3770570b7" (orgtrello-data/entity-card-id actual-result))
              (expect "51d99bbc1e1d8988390047f2" (orgtrello-data/entity-board-id actual-result))
              (expect "chapters" (orgtrello-data/entity-name actual-result))
              (expect 2 (orgtrello-data/entity-level actual-result))
              (expect "52c0b52ece09f28f6801fe5e" (orgtrello-data/entity-id actual-result))
              (expect 2 (length (orgtrello-data/entity-items actual-result)))
              (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:position 16384 :name "introduction" :id "52c0b537ad469b9d6d044fa1" :checked "incomplete" :level 3))
                                    (car (orgtrello-data/entity-items actual-result))))
              (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:position 32768 :name "Ch. 1 - A scalable language" :id "52c0b5386548fde20105ea4e" :checked "incomplete" :level 3))
                                    (cadr (orgtrello-data/entity-items actual-result)))))

(expectations
 (expect :keyword (orgtrello-data/--deal-with-key :keyword))
 (expect :name    (orgtrello-data/--deal-with-key 'name))
 (expect nil      (orgtrello-data/--deal-with-key 'something-that-does-not-exist)))

(expectations
  (expect t (hash-equal
             #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data
                           (url :url id :id name :name idMembers :member-ids idList :list-id idChecklists :checklists idBoard :board-id due :due desc :desc closed :closed idCard :card-id checkItems :items state :checked status :status pos :position keyword :keyword member-ids :member-ids member :member memberships :memberships username :username fullName :full-name actions :comments labelNames :labels red :red yellow :yellow blue :blue green :green orange :orange purple :purple labels :labels color :color))
             *ORGTRELLO/DATA-MAP-KEYWORDS*)))

(expectations
  (expect 'orgtrello-data/--parse-actions (orgtrello-data/--dispatch-parse-data-fn ':comments))
  (expect 'orgtrello-data/parse-data (orgtrello-data/--dispatch-parse-data-fn ':something-else)))

(defvar partial-data-to-test '[((memberCreator (username . "ardumont")
                                               (initials . "AD")
                                               (fullName . "Antoine R. Dumont")
                                               (avatarHash . "ff242a6fbf51ccf70e4760b23e194bca")
                                               (id . "4f2baa2f72b7c1293501cad3"))
                                (date . "2014-03-22T11:30:15.358Z")
                                (type . "commentCard")
                                (data
                                 (text . "comment 4")
                                 (card
                                  (id . "532d6fd99e39209f27ab2d61")
                                  (name . "Joy of FUN(ctional) LANGUAGES")
                                  (idShort . 2733)
                                  (shortLink . "otLncD1l"))
                                 (board
                                  (id . "51d99bbc1e1d8988390047f2")
                                  (name . "api test board")
                                  (shortLink . "6JSsg3aG")))
                                (idMemberCreator . "4f2baa2f72b7c1293501cad3")
                                (id . "532d7447b247e3d24f365309"))
                               ((memberCreator
                                 (username . "ardumont")
                                 (initials . "AD")
                                 (fullName . "Antoine R. Dumont")
                                 (avatarHash . "ff242a6fbf51ccf70e4760b23e194bca")
                                 (id . "4f2baa2f72b7c1293501cad3"))
                                (date . "2014-03-22T11:30:09.927Z")
                                (type . "commentCard")
                                (data
                                 (text . "comment 3")
                                 (card
                                  (id . "532d6fd99e39209f27ab2d61")
                                  (name . "Joy of FUN(ctional) LANGUAGES")
                                  (idShort . 2733)
                                  (shortLink . "otLncD1l"))
                                 (board
                                  (id . "51d99bbc1e1d8988390047f2")
                                  (name . "api test board")
                                  (shortLink . "6JSsg3aG")))
                                (idMemberCreator . "4f2baa2f72b7c1293501cad3")
                                (id . "532d7441852414f343560757"))])

(expectations
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:comment-id "532d7447b247e3d24f365309" :comment-text "comment 4" :comment-user "ardumont"))
                (car (orgtrello-data/--parse-actions partial-data-to-test))))
  (expect t
    (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:comment-id "532d7441852414f343560757" :comment-text "comment 3" :comment-user "ardumont"))
                (cadr (orgtrello-data/--parse-actions partial-data-to-test)))))

(expectations
 (expect "me: some first comment###another-me: another comment"
         (orgtrello-data/comments-to-list (list (orgtrello-hash/make-properties '((:comment-user . "me") (:comment-text . "some first comment")))
                                                (orgtrello-hash/make-properties '((:comment-user . "another-me") (:comment-text . "another comment")))))))

(expectations
 (expect ":red: some label\n\n:yellow: some other label"
         (orgtrello-data/format-labels '((":red" . "some label") (":yellow" . "some other label")))))

(expectations
 (expect "dude0: some comments\n\ndude1: some other comments"
         (orgtrello-data/format-comments "dude0: some comments###dude1: some other comments")))

(expectations
 (expect "dude0: some comments###dude1: some other comments"
         (orgtrello-data/unformat-comments "dude0: some comments\n\ndude1: some other comments")))

(expectations (desc "orgtrello-data/id-p")
              (expect t   (orgtrello-data/id-p "anything-that-does-not-start-with-orgtrello-marker"))
              (expect t   (orgtrello-data/id-p "agfgdsfgbdfgbdfgbdfshouldbetrue"))
              (expect t   (orgtrello-data/id-p "orgtrello-markeragfgdsfgbdfgbdfgbdfshouldbetrue"))
              (expect t   (orgtrello-data/id-p "should-be-true-orgtrello-marker-agfgdsfgbdfgbdfgbdf"))
              (expect nil (orgtrello-data/id-p "orgtrello-marker-shouldbenil"))
              (expect nil (orgtrello-data/id-p nil)))

(ert-deftest testing-orgtrello-data/merge-item ()
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :keyword "TODO" :id nil :level 3))
                      (orgtrello-data/merge-item (orgtrello-hash/make-properties `((:checked . "anything") (:name . "some name")))
                                              (orgtrello-hash/make-properties `((:name . "some other name") (:keyword "TODO"))))))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :keyword "DONE" :id nil :level 3))
                      (orgtrello-data/merge-item (orgtrello-hash/make-properties `((:checked . "complete") (:name . "some name")))
                                               nil)))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :keyword "TODO" :id nil :level 3))
                      (orgtrello-data/merge-item (orgtrello-hash/make-properties `((:checked . "anything") (:name . "some name")))
                                              (orgtrello-hash/make-properties `((:name . "some other name") (:keyword . "TODO") (:id . "1"))))))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :keyword "TODO" :id "1" :level 3))
                      (orgtrello-data/merge-item (orgtrello-hash/make-properties `((:checked . "anything") (:name . "some name") (:id . "1")))
                                              (orgtrello-hash/make-properties `((:name . "some other name") (:keyword . "TODO"))))))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :keyword "TODO" :id "1" :level 3))
                      (orgtrello-data/merge-item (orgtrello-hash/make-properties `((:checked . "anything") (:name . "some name") (:id . "1")))
                                              (orgtrello-hash/make-properties `((:name . "some other name") (:keyword "TODO") (:id . "2"))))))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :keyword "TODO" :id "1" :level 3))
                      (orgtrello-data/merge-item (orgtrello-hash/make-properties `((:checked . "anything") (:name . "some name") (:id . "1")))
                                              (orgtrello-hash/make-properties `((:name . "some other name") (:keyword "TODO"))))))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :keyword "DONE" :id "1" :level 3))
                      (orgtrello-data/merge-item (orgtrello-hash/make-properties `((:checked . "complete") (:name . "some name") (:id . "1")))
                                              nil))))

(expectations (desc "orgtrello-data/--compute-state-item-checkbox")
              (expect "[X]" (orgtrello-data/--compute-state-item-checkbox "complete"))
              (expect "[ ]" (orgtrello-data/--compute-state-item-checkbox "incomplete")))

(ert-deftest testing-orgtrello-data/--merge-checklist ()
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :id nil :level 2))
                      (orgtrello-data/--merge-checklist (orgtrello-hash/make-properties `((:id . nil) (:name . "some name")))
                                                   (orgtrello-hash/make-properties `((:name . "some other name"))))))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :id nil :level 2))
                      (orgtrello-data/--merge-checklist (orgtrello-hash/make-properties `((:id . nil) (:name . "some name")))
                                                   (orgtrello-hash/make-properties `((:name . "some other name"))))))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :id nil :level 2))
                      (orgtrello-data/--merge-checklist (orgtrello-hash/make-properties `((:id . nil) (:name . "some name")))
                                                   nil)))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :id nil :level 2))
                      (orgtrello-data/--merge-checklist (orgtrello-hash/make-properties `((:id . nil) (:name . "some name")))
                                                   (orgtrello-hash/make-properties `((:name . "some other name") (:id "1"))))))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :id "1" :level 2))
                      (orgtrello-data/--merge-checklist (orgtrello-hash/make-properties `((:id . "1") (:name . "some name") (:id . "1")))
                                                   (orgtrello-hash/make-properties `((:name . "some other name"))))))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :id "1" :level 2))
                      (orgtrello-data/--merge-checklist (orgtrello-hash/make-properties `((:id . "1") (:name . "some name") (:id . "1")))
                                                   (orgtrello-hash/make-properties `((:name . "some other name") (:id 2))))))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :id "1" :level 2))
                      (orgtrello-data/--merge-checklist (orgtrello-hash/make-properties `((:id . "1") (:name . "some name") (:id . "1")))
                                                   (orgtrello-hash/make-properties `((:name . "some other name"))))))
  (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name "some name" :id "1" :level 2))
                      (orgtrello-data/--merge-checklist (orgtrello-hash/make-properties `((:id . "1") (:name . "some name")))
                                                   nil))))

(ert-deftest testing-orgtrello-data/--merge-card ()
  (let ((*ORGTRELLO/HMAP-LIST-ORGKEYWORD-ID-NAME* (orgtrello-hash/make-properties `((1 . "TODO") (2 . "DONE") (3 . "IN-PROGRESS")))))
    (should (hash-equal (orgtrello-hash/make-properties `((:name . "some other name")))
             (orgtrello-data/--merge-card nil
                                          (orgtrello-hash/make-properties `((:name . "some other name"))))))
    (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data
                                      (:name "some name" :tags nil :comments nil :level 1 :id "123" :keyword nil :member-ids "" :desc nil :due nil))
                        (orgtrello-data/--merge-card (orgtrello-hash/make-properties '((:id . "123") (:name . "some name") (:idList . 1)))
                                                     (orgtrello-hash/make-properties '((:name . "some other name"))))))
    (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data
                                      (:name "some name" :tags ":red:green:" :comments "some comments" :level 1 :id "123" :keyword nil :member-ids "ardumont-id,some-dude-id" :desc "some description" :due "some due date"))
                        (orgtrello-data/--merge-card (orgtrello-hash/make-properties `((:id . "123")
                                                                                       (:name . "some name")
                                                                                       (:status . "TODO")
                                                                                       (:idList . 1)
                                                                                       (:comments . "some comments")
                                                                                       (:member-ids . ("ardumont-id" "some-dude-id"))
                                                                                       (:desc . "some description")
                                                                                       (:due . "some due date")
                                                                                       (:labels . ,(list (orgtrello-hash/make-properties '((:color . "red")))
                                                                                                         (orgtrello-hash/make-properties '((:color . "green")))))))
                                                     (orgtrello-hash/make-properties '((:name . "some other name"))))))
    (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data
                                      (:name "some name" :tags ":other-stuff:not-trello-flag:red:green:" :comments "some comments" :level 1 :id "123" :keyword nil :member-ids "ardumont-id,some-dude-id" :desc "some description" :due "some due date"))
                        (orgtrello-data/--merge-card (orgtrello-hash/make-properties `((:id . "123")
                                                                                       (:name . "some name")
                                                                                       (:status . "TODO")
                                                                                       (:idList . 1)
                                                                                       (:comments . "some comments")
                                                                                       (:member-ids . ("ardumont-id" "some-dude-id"))
                                                                                       (:desc . "some description")
                                                                                       (:due . "some due date")
                                                                                       (:labels . ,(list (orgtrello-hash/make-properties '((:color . "red")))
                                                                                                         (orgtrello-hash/make-properties '((:color . "green")))))))
                                                     (orgtrello-hash/make-properties '((:name . "some other name")
                                                                                       (:tags . ":other-stuff:not-trello-flag:"))))))))

(expectations (desc "orgtrello-data/--merge-member-ids")
              (expect "org-trello/ot is on! To begin with, hit C-c o h or M-x 'org-trello/help-describing-bindings" (org-trello/--startup-message "C-c o")))

(expectations (desc "orgtrello-data/--merge-member-ids")
              (expect "1,5,2,3,4"
                (orgtrello-data/--merge-member-ids (orgtrello-hash/make-properties `((:member-ids . ("1" "5"))))
                                                   (orgtrello-hash/make-properties `((:member-ids . "2,3,4"))))))

(expectations (desc "orgtrello-data/--merge-member-ids")
              (expect "1,5,2,3,4"
                (orgtrello-data/--merge-member-ids (orgtrello-hash/make-properties `((:member-ids . ["1" "5"])))
                                                   (orgtrello-hash/make-properties `((:member-ids . "2,3,4"))))))

(expectations (desc "orgtrello-data/--compute-state-generic")
              (expect "DONE" (orgtrello-data/--compute-state-generic "complete" '("DONE" "TODO")))
              (expect "TODO" (orgtrello-data/--compute-state-generic "incomplete" '("DONE" "TODO")))
              (expect "DONE" (orgtrello-data/--compute-state-generic "DONE" '("DONE" "TODO")))

              (expect "[X]" (orgtrello-data/--compute-state-generic "complete" '("[X]" "[-]")))
              (expect "[-]" (orgtrello-data/--compute-state-generic "incomplete" '("[X]" "[-]")))
              (expect "[X]" (orgtrello-data/--compute-state-generic "DONE" '("[X]" "[-]"))))

(expectations (desc "orgtrello-data/--users-from")
              (expect '("a" "b" "c") (orgtrello-data/--users-from "a,b,c,,"))
              (expect '() (orgtrello-data/--users-from ",,,"))
              (expect '() (orgtrello-data/--users-from ""))
              (expect '() (orgtrello-data/--users-from nil)))

(expectations (desc "orgtrello-data/--users-to")
              (expect "" (orgtrello-data/--users-to nil))
              (expect "a,b,c," (orgtrello-data/--users-to '("a" "b" "c" ""))))

(expectations
  (expect ":trello-labels:"                    (orgtrello-data/--merge-labels-as-tags ":trello-labels:" nil))
  (expect ":org-tags:trello-labels:"           (orgtrello-data/--merge-labels-as-tags ":trello-labels:" ":org-tags:"))
  (expect ":red:org-tags:howto:trello-labels:" (orgtrello-data/--merge-labels-as-tags ":trello-labels:red:" ":red:org-tags:howto:")))

(expectations
  (expect '("a" "b" "c") (orgtrello-data/--from-tags-to-list ":a:b:c:")))

(expectations
  (expect ":red:" (orgtrello-data/--labels-hash-to-tags        (list (orgtrello-hash/make-properties '((:color . "red"))))))
  (expect ":red:yellow:" (orgtrello-data/--labels-hash-to-tags (list (orgtrello-hash/make-properties '((:color . "red")))
                                                                     (orgtrello-hash/make-properties '((:color . "yellow")))))))
(expectations
  (expect nil (orgtrello-data/--labels-to-tags nil))
  (expect ":a:b:c:" (orgtrello-data/--labels-to-tags '("a" "b" "c"))))

(expectations
  (expect nil
    (orgtrello-data/puthash-data :key :value nil))
  (expect t
    (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:key :value))
                (orgtrello-data/puthash-data :key :value (orgtrello-hash/empty-hash))))
  (expect t
    (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:1 :2 :key :value))
                (orgtrello-data/puthash-data :key :value (orgtrello-hash/make-properties '((:1 . :2) (:key . :other-value)))))))

(expectations
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:name         :value)) (orgtrello-data/put-entity-name         :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:memberships  :value)) (orgtrello-data/put-entity-memberships  :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:member       :value)) (orgtrello-data/put-entity-member       :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:username     :value)) (orgtrello-data/put-entity-username     :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:action       :value)) (orgtrello-data/put-entity-action       :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:board-id     :value)) (orgtrello-data/put-entity-board-id     :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:card-id      :value)) (orgtrello-data/put-entity-card-id      :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:list-id      :value)) (orgtrello-data/put-entity-list-id      :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:member-ids   :value)) (orgtrello-data/put-entity-member-ids   :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:desc         :value)) (orgtrello-data/put-entity-description  :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:checklists   :value)) (orgtrello-data/put-entity-checklists   :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:items        :value)) (orgtrello-data/put-entity-items        :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:position     :value)) (orgtrello-data/put-entity-position     :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:buffername   :value)) (orgtrello-data/put-entity-buffername   :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:checked      :value)) (orgtrello-data/put-entity-checked      :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:due          :value)) (orgtrello-data/put-entity-due          :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:id           :value)) (orgtrello-data/put-entity-id           :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:level        :value)) (orgtrello-data/put-entity-level        :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:closed       :value)) (orgtrello-data/put-entity-closed       :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:callback     :value)) (orgtrello-data/put-entity-callback     :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:start        :value)) (orgtrello-data/put-entity-start        :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:comments     :value)) (orgtrello-data/put-entity-comments     :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:labels       :value)) (orgtrello-data/put-entity-labels       :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:tags         :value)) (orgtrello-data/put-entity-tags         :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:keyword      :value)) (orgtrello-data/put-entity-keyword      :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:comment-id   :value)) (orgtrello-data/put-entity-comment-id   :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:comment-text :value)) (orgtrello-data/put-entity-comment-text :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:comment-user :value)) (orgtrello-data/put-entity-comment-user :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:method       :value)) (orgtrello-data/put-entity-method       :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:uri          :value)) (orgtrello-data/put-entity-uri          :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:sync         :value)) (orgtrello-data/put-entity-sync         :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:params       :value)) (orgtrello-data/put-entity-params       :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:current      :value)) (orgtrello-data/put-current             :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:parent       :value)) (orgtrello-data/put-parent              :value (orgtrello-hash/empty-hash))))
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:grandparent  :value)) (orgtrello-data/put-grandparent         :value (orgtrello-hash/empty-hash)))))
