(require 'ert)
(require 'ert-expectations)
(require 'el-mock)

(expectations (desc "testing orgtrello-data/--convert-to-orgtrello-metadata")
  (expect "some name :orgtrello-id-identifier:"  (gethash :name       (orgtrello-data/--convert-to-orgtrello-metadata '(:comments "" "" "buffer-name.org" :point :id :due 0 1 "IN PROGRESS" nil "some name :orgtrello-id-identifier:" nil))))
  (expect "IN PROGRESS"                          (gethash :keyword    (orgtrello-data/--convert-to-orgtrello-metadata '(:comments "" "" "buffer-name.org" :point :id :due 0 1 "IN PROGRESS" nil "some name :orgtrello-id-identifier:" nil))))
  (expect 0                                      (gethash :level      (orgtrello-data/--convert-to-orgtrello-metadata '(:comments "" "" "buffer-name.org" :point :id :due 0 1 "IN PROGRESS" nil "some name :orgtrello-id-identifier:" nil))))
  (expect :id                                    (gethash :id         (orgtrello-data/--convert-to-orgtrello-metadata '(:comments "" "" "buffer-name.org" :point :id :due 0 1 "IN PROGRESS" nil "some name :orgtrello-id-identifier:" nil))))
  (expect :due                                   (gethash :due        (orgtrello-data/--convert-to-orgtrello-metadata '(:comments "" "" "buffer-name.org" :point :id :due 0 1 "IN PROGRESS" nil "some name :orgtrello-id-identifier:" nil))))
  (expect :point                                 (gethash :position   (orgtrello-data/--convert-to-orgtrello-metadata '(:comments "" "" "buffer-name.org" :point :id :due 0 1 "IN PROGRESS" nil "some name :orgtrello-id-identifier:" nil))))
  (expect "1,2,3"                                (gethash :member-ids (orgtrello-data/--convert-to-orgtrello-metadata '(:comments "" "1,2,3" "buffer-name.org" :point :id :due 0 1 "IN PROGRESS" nil "some name :orgtrello-id-identifier:" nil))))
  (expect :desc                                  (gethash :desc       (orgtrello-data/--convert-to-orgtrello-metadata '(:comments :desc "1,2,3" "buffer-name.org" :point :id :due 0 1 "IN PROGRESS" nil "some name :orgtrello-id-identifier:" nil))))
  (expect :comments                              (gethash :comments   (orgtrello-data/--convert-to-orgtrello-metadata '(:comments :desc "1,2,3" "buffer-name.org" :point :id :due 0 1 "IN PROGRESS" nil "some name :orgtrello-id-identifier:" nil)))))

(expectations (desc "testing orgtrello-data/--convert-orgmode-date-to-trello-date")
  (expect "2013-07-18T02:00:00.000Z" (orgtrello-data/--convert-orgmode-date-to-trello-date "2013-07-18T02:00:00.000Z"))
  (expect "2013-07-29T14:00:00.000Z" (orgtrello-data/--convert-orgmode-date-to-trello-date "2013-07-29 lun. 14:00"))
  (expect "2013-07-29T00:00:00.000Z" (orgtrello-data/--convert-orgmode-date-to-trello-date "2013-07-29"))
  (expect nil                        (orgtrello-data/--convert-orgmode-date-to-trello-date nil)))

(expectations (desc "orgtrello-data/entity-*")
  (expect "test" (orgtrello-data/entity-buffername            (orgtrello-hash/make-properties `((:buffername . "test")))))
  (expect nil (orgtrello-data/entity-buffername               (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-position              (orgtrello-hash/make-properties `((:position . "test")))))
  (expect nil (orgtrello-data/entity-position                 (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-id                    (orgtrello-hash/make-properties `((:id . "test")))))
  (expect nil (orgtrello-data/entity-id                       (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-name                  (orgtrello-hash/make-properties `((:name . "test")))))
  (expect nil (orgtrello-data/entity-name                     (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-list-id               (orgtrello-hash/make-properties `((:list-id . "test")))))
  (expect nil (orgtrello-data/entity-list-id                  (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-checklists         (orgtrello-hash/make-properties `((:checklists . "test")))))
  (expect nil (orgtrello-data/entity-checklists            (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-items           (orgtrello-hash/make-properties `((:items . "test")))))
  (expect nil (orgtrello-data/entity-items              (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-card-id               (orgtrello-hash/make-properties `((:card-id . "test")))))
  (expect nil (orgtrello-data/entity-card-id                  (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-due                   (orgtrello-hash/make-properties `((:due . "test")))))
  (expect nil (orgtrello-data/entity-due                      (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-keyword                 (orgtrello-hash/make-properties `((:keyword . "test")))))
  (expect nil (orgtrello-data/entity-keyword                    (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-closed        (orgtrello-hash/make-properties `((:closed . "test")))))
  (expect nil (orgtrello-data/entity-closed           (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-callback              (orgtrello-hash/make-properties `((:callback . "test")))))
  (expect nil (orgtrello-data/entity-callback                 (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-sync                 (orgtrello-hash/make-properties `((:sync . "test")))))
  (expect nil (orgtrello-data/entity-sync                    (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-level                 (orgtrello-hash/make-properties `((:level . "test")))))
  (expect nil (orgtrello-data/entity-level                    (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-method               (orgtrello-hash/make-properties `((:method . "test")))))
  (expect nil (orgtrello-data/entity-method                  (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-uri                  (orgtrello-hash/make-properties `((:uri . "test")))))
  (expect nil (orgtrello-data/entity-uri                     (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-params               (orgtrello-hash/make-properties `((:params . "test")))))
  (expect nil (orgtrello-data/entity-params                  (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-start                 (orgtrello-hash/make-properties `((:start . "test")))))
  (expect nil (orgtrello-data/entity-start                    (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-action                (orgtrello-hash/make-properties `((:action . "test")))))
  (expect nil (orgtrello-data/entity-action                   (orgtrello-hash/make-properties `((inexistant . "test")))))
  (expect "test" (orgtrello-data/entity-comments              (orgtrello-hash/make-properties `((:comments . "test")))))
  (expect nil (orgtrello-data/entity-comments                 (orgtrello-hash/make-properties `((inexistant . "test"))))))

(expectations (desc "orgtrello-data/entity-* - 2")
  (expect :some-method (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:method . :some-method )))))
  (expect nil (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:inexistant . :some-method )))))
  (expect :some-uri (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:method . :some-uri )))))
  (expect nil (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:inexistant . :some-method )))))
  (expect :some-sync (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:method . :some-sync )))))
  (expect nil (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:inexistant . :some-method )))))
  (expect :some-params (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:method . :some-params )))))
  (expect nil (orgtrello-data/entity-method (orgtrello-hash/make-properties `((:inexistant . :some-method ))))))

(expectations (desc "orgtrello-data/--entity-with-level-p")
 (expect nil (orgtrello-data/--entity-with-level-p nil 1))
 (expect t   (orgtrello-data/--entity-with-level-p (orgtrello-hash/make-properties `((:level . ,*CARD-LEVEL*))) *CARD-LEVEL*))
 (expect nil (orgtrello-data/--entity-with-level-p (orgtrello-hash/make-properties `((:level . ,*CHECKLIST-LEVEL*))) *CARD-LEVEL*)))

(expectations (desc "orgtrello-data/entity-card-p")
 (expect t   (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((:level . ,*CARD-LEVEL*)))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((:level . ,*CHECKLIST-LEVEL*)))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((idList . 1)))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((id . 1)))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((:list-id . "this is a card")))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((anything-else . "this is not a card"))))))

(expectations (desc "orgtrello-data/entity-checklist-p")
 (expect t   (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((:level . ,*CHECKLIST-LEVEL*)))))
 (expect nil (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((:level . ,*ITEM-LEVEL*)))))
 (expect nil (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((idCard . 1)))))
 (expect nil (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((id . 1)))))
 (expect nil (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((:card-id . "this is a checklist")))))
 (expect nil (orgtrello-data/entity-checklist-p (orgtrello-hash/make-properties `((anything-else . "this is not a checklist"))))))

(expectations (desc "orgtrello-data/entity-item-p")
  (expect t   (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((:level . ,*ITEM-LEVEL*)))))
  (expect nil (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((:checked . "this is an item")))))
  (expect nil (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((anything-else . "this is not a item")))))
  (expect nil (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((:level . ,*CARD-LEVEL*)))))
  (expect nil (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((:state . 1)))))
  (expect nil (orgtrello-data/entity-item-p (orgtrello-hash/make-properties `((id . 1))))))

(expectations (desc "orgtrello-data/entry-get-full-metadata!")
  (expect nil    (->> (orgtrello-tests/with-temp-buffer "* card" (orgtrello-data/entry-get-full-metadata!))
                      (orgtrello-data/parent)))
  (expect nil    (->> (orgtrello-tests/with-temp-buffer "* card" (orgtrello-data/entry-get-full-metadata!))
                      (orgtrello-data/grandparent)))
  (expect "card" (->> (orgtrello-tests/with-temp-buffer "* card" (orgtrello-data/entry-get-full-metadata!))
                      (orgtrello-data/current)
                      orgtrello-data/entity-name)))

(expectations (desc "orgtrello-data/entry-get-full-metadata!")
  (expect "card"      (->> (orgtrello-tests/with-temp-buffer "* card\n- [ ] checklist\n" (orgtrello-data/entry-get-full-metadata!))
                           (orgtrello-data/parent)
                           orgtrello-data/entity-name))
  (expect nil         (->> (orgtrello-tests/with-temp-buffer "* card\n- [ ] checklist\n" (orgtrello-data/entry-get-full-metadata!))
                           (orgtrello-data/grandparent)))
  (expect "checklist" (->> (orgtrello-tests/with-temp-buffer "* card\n- [ ] checklist\n" (orgtrello-data/entry-get-full-metadata!))
                           (orgtrello-data/current)
                           orgtrello-data/entity-name)))

(expectations (desc "orgtrello-data/entry-get-full-metadata!")
  (expect "checklist" (->> (orgtrello-tests/with-temp-buffer "* card\n- [ ] checklist\n  - [ ] item\n" (orgtrello-data/entry-get-full-metadata!))
                           (orgtrello-data/parent)
                           orgtrello-data/entity-name))
  (expect "card"      (->> (orgtrello-tests/with-temp-buffer "* card\n- [ ] checklist\n  - [ ] item\n" (orgtrello-data/entry-get-full-metadata!))
                           (orgtrello-data/grandparent)
                           orgtrello-data/entity-name))
  (expect "item"      (->> (orgtrello-tests/with-temp-buffer "* card\n- [ ] checklist\n  - [ ] item\n" (orgtrello-data/entry-get-full-metadata!))
                           (orgtrello-data/current)
                           orgtrello-data/entity-name)))

(expectations (desc "orgtrello-data/merge-2-lists-without-duplicates")
  (expect '(1 2 3 4) (orgtrello-data/merge-2-lists-without-duplicates '(1 2 3) '(4 1 2)))
  (expect '(4 1 2)   (orgtrello-data/merge-2-lists-without-duplicates nil '(4 1 2)))
  (expect '(4 1 2)   (orgtrello-data/merge-2-lists-without-duplicates '(4 1 2) nil))
  (expect nil        (orgtrello-data/merge-2-lists-without-duplicates nil nil)))

(expectations (desc "orgtrello-data/entity-card-p")
 (expect t (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((:level . ,*CARD-LEVEL*)))))
 (expect nil (orgtrello-data/entity-card-p (orgtrello-hash/make-properties `((:level . ,*CHECKLIST-LEVEL*))))))

(expectations
  (expect "some-method" (orgtrello-data/gethash-data :method (orgtrello-hash/make-properties `((:method . "some-method")))))
  (expect nil           (orgtrello-data/gethash-data :method (orgtrello-hash/make-properties `((:inexistant . "some-method")))))
  (expect nil           (orgtrello-data/gethash-data :key nil))
  (expect :value        (orgtrello-data/gethash-data :key (orgtrello-hash/make-properties `((:key . :value)))))
  (expect nil           (orgtrello-data/gethash-data :key (orgtrello-hash/make-properties `((:other-key . :value)))))
  (expect nil           (orgtrello-data/gethash-data :key (orgtrello-hash/make-properties `((:key . nil))))))

(expectations (desc "orgtrello-data/--compute-level")
  (expect *CARD-LEVEL*      (orgtrello-data/--compute-level (orgtrello-hash/make-properties '((:list-id . 0)))))
  (expect *CHECKLIST-LEVEL* (orgtrello-data/--compute-level (orgtrello-hash/make-properties '((:card-id . 0)))))
  (expect *ITEM-LEVEL*      (orgtrello-data/--compute-level (orgtrello-hash/make-properties '((:checked . 0)))))
  (expect nil               (orgtrello-data/--compute-level (orgtrello-hash/make-properties '()))))

(ert-deftest testing-orgtrello-data/parse-data-card ()
  ;; check card
  (should (hash-equal (orgtrello-hash/make-properties `((:url . "https://trello.com/c/9XPLuJhi/2515-joy-of-fun-ctional-languages")
                                                        (:name . "Joy of FUN(ctional) LANGUAGES")
                                                        (:level . 1)
                                                        (:member-ids . (1 2 3))
                                                        (:checklists . (4 5 6))
                                                        (:list-id . "51d99bbc1e1d8988390047f3")
                                                        (:desc . "some-desc")
                                                        (:board-id . "51d99bbc1e1d8988390047f2")
                                                        (:closed . nil)
                                                        (:id . "52c09056d84eeca156001a24")
                                                        (:due . "some-due-date")
                                                        (:position . "98304")))

                      (orgtrello-data/parse-data '((url . "https://trello.com/c/9XPLuJhi/2515-joy-of-fun-ctional-languages")
                                                    (shortUrl . "https://trello.com/c/9XPLuJhi")
                                                    (pos . "98304")
                                                    (name . "Joy of FUN(ctional) LANGUAGES")
                                                    (manualCoverAttachment . :json-false)
                                                    (idAttachmentCover)
                                                    (idShort . 2515)
                                                    (idMembers . [1 2 3])
                                                    (idList . "51d99bbc1e1d8988390047f3")
                                                    (idChecklists . [4 5 6])
                                                    (idBoard . "51d99bbc1e1d8988390047f2")
                                                    (due . "some-due-date")
                                                    (descData (emoji))
                                                    (desc . "some-desc")
                                                    (dateLastActivity . "2013-12-29T21:12:54.164Z")
                                                    (closed . :json-false)
                                                    (checkItemStates . [])
                                                    (badges (due)
                                                            (description . :json-false)
                                                            (attachments . 0)
                                                            (comments . 0)
                                                            (checkItemsChecked . 0)
                                                            (checkItems . 0)
                                                            (fogbugz)
                                                            (subscribed . :json-false)
                                                            (viewingMemberVoted . :json-false)
                                                            (votes . 0))
                                                    (id . "52c09056d84eeca156001a24"))))))

(ert-deftest testing-orgtrello-data/parse-data-checklist ()
  ;; check checklist
  (should (hash-equal (orgtrello-hash/make-properties `((:items . ())
                                                        (:name . "LISP family")
                                                        (:level . 2)
                                                        (:id . "52c0a36886b7bdd67c008cf1")
                                                        (:card-id . "52c09056d84eeca156001a24")
                                                        (:board-id . "51d99bbc1e1d8988390047f2")
                                                        (:id . "52c0a36886b7bdd67c008cf1")
                                                        (:position . 16384)))
                      (orgtrello-data/parse-data '((checkItems . [])
                                                    (pos . 16384)
                                                    (idCard . "52c09056d84eeca156001a24")
                                                    (idBoard . "51d99bbc1e1d8988390047f2")
                                                    (name . "LISP family")
                                                    (id . "52c0a36886b7bdd67c008cf1"))))))

(ert-deftest testing-orgtrello-data/parse-data-item ()
  (should (hash-equal
           (orgtrello-hash/make-properties `((:name . "Emacs-Lisp")
                                             (:level . 3)
                                             (:id . "52c0a64cfb34123369015393")
                                             (:checked . "complete")
                                             (:position . 16384)))
           (orgtrello-data/parse-data '((pos . 16384)
                                         (nameData (emoji))
                                         (name . "Emacs-Lisp")
                                         (id . "52c0a64cfb34123369015393")
                                         (state . "complete")))))
  (should (hash-equal
           (orgtrello-hash/make-properties `((:name . "Emacs-Lisp")
                                             (:level . 3)
                                             (:id . "52c0a64cfb34123369015393")
                                             (:checked . "incomplete")
                                             (:position . 16384)))
           (orgtrello-data/parse-data '((pos . 16384)
                                         (nameData (emoji))
                                         (name . "Emacs-Lisp")
                                         (id . "52c0a64cfb34123369015393")
                                         (state . "incomplete"))))))

(ert-deftest testing-orgtrello-data/parse-data-http-response ()
  (should (hash-equal
           (orgtrello-hash/make-properties `((:status . ok)))
           (orgtrello-data/parse-data '((status . ok))))))

(ert-deftest testing-orgtrello-data/parse-data-remaining-possible-inputs ()
  (should (hash-equal
           (orgtrello-hash/make-properties `((:buffername . ":buffername")
                                             (:sync . ":sync")
                                             (:uri . ":uri")
                                             (:method . ":method")
                                             (:params . ":params")
                                             (:action . ":action")
                                             (:start . ":start")
                                             (:position . ":position")
                                             (:keyword . ":keyword")
                                             (:callback . (lambda (id) id))))
           (orgtrello-data/parse-data '((buffername . ":buffername")
                                         (sync . ":sync")
                                         (uri . ":uri")
                                         (method . ":method")
                                         (params . ":params")
                                         (action . ":action")
                                         (start . ":start")
                                         (position . ":position")
                                         (:keyword . ":keyword")
                                         (callback . (lambda (id) id)))))))

(ert-deftest testing-orgtrello-data/parse-data-with-list-of-results ()
  (let ((list-hash (orgtrello-data/parse-data '[((shortUrl . "https://trello.com/b/o9oY3NlQ")
                                                 (dateLastView . "2013-08-08T14:07:03.382Z")
                                                 (dateLastActivity)
                                                 (powerUps . [])
                                                 (subscribed . :json-false)
                                                 (shortLink . "o9oY3NlQ")
                                                 (invitations . [])
                                                 (prefs
                                                  (canInvite . t)
                                                  (canBePrivate . t)
                                                  (canBeOrg . t)
                                                  (canBePublic . t)
                                                  (bg . "blue")
                                                  (backgroundBrightness . "unknown")
                                                  (backgroundTile . :json-false)
                                                  (backgroundImageScaled)
                                                  (backgroundImage)
                                                  (backgroundColor . "#205C7E")
                                                  (cardCovers . t)
                                                  (selfJoin . :json-false)
                                                  (invitations . "members")
                                                  (comments . "members")
                                                  (voting . "disabled")
                                                  (permissionLevel . "private"))
                                                 (url . "https://trello.com/b/o9oY3NlQ/1-board-to-rule-them-all")
                                                 (pinned . t)
                                                 (invited . :json-false)
                                                 (idOrganization)
                                                 (closed . t)
                                                 (descData)
                                                 (desc . "")
                                                 (name . "1-board-to-rule-them-all")
                                                 (id . "5203a4fd0ac2f5b75c001d1d"))
                                                ((shortUrl . "https://trello.com/b/xzOJmxzy")
                                                 (dateLastView . "2013-04-15T09:58:13.992Z")
                                                 (dateLastActivity)
                                                 (powerUps .
                                                           [])
                                                 (subscribed . :json-false)
                                                 (shortLink . "xzOJmxzy")
                                                 (invitations . [])
                                                 (prefs
                                                  (canInvite . t)
                                                  (canBePrivate . t)
                                                  (canBeOrg . t)
                                                  (canBePublic . t)
                                                  (bg . "blue")
                                                  (backgroundBrightness . "unknown")
                                                  (backgroundTile . :json-false)
                                                  (backgroundImageScaled)
                                                  (backgroundImage)
                                                  (backgroundColor . "#205C7E")
                                                  (cardCovers . t)
                                                  (selfJoin . :json-false)
                                                  (invitations . "members")
                                                  (comments . "members")
                                                  (voting . "disabled")
                                                  (permissionLevel . "org"))
                                                 (url . "https://trello.com/b/xzOJmxzy/demandes-infra")
                                                 (pinned . t)
                                                 (invited . :json-false)
                                                 (idOrganization . "5044ce9d5371b0384813bba6")
                                                 (closed . t)
                                                 (descData)
                                                 (desc . "")
                                                 (name . "Demandes Infra")
                                                 (id . "50aa59502ddab2fc1100115b"))])))
    (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data
                                      (:url "https://trello.com/b/o9oY3NlQ/1-board-to-rule-them-all" :closed t :desc "" :name "1-board-to-rule-them-all" :id "5203a4fd0ac2f5b75c001d1d"))
                        (first list-hash)))
    (should (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data
                                      (:url "https://trello.com/b/xzOJmxzy/demandes-infra" :closed t :desc "" :name "Demandes Infra" :id "50aa59502ddab2fc1100115b"))
                        (second list-hash)))))

(expectations (desc "orgtrello-data/parse-data - with nested assoc list.")
              (defvar actual-result)
              (setq actual-result (orgtrello-data/parse-data '((checkItems . [((pos . 16384)
                                                                                (nameData)
                                                                                (name . "introduction")
                                                                                (id . "52c0b537ad469b9d6d044fa1")
                                                                                (state . "incomplete"))
                                                                               ((pos . 32768)
                                                                                (nameData)
                                                                                (name . "Ch. 1 - A scalable language")
                                                                                (id . "52c0b5386548fde20105ea4e")
                                                                                (state . "incomplete"))])
                                                                (idCard . "52c0b529bdbf2ab3770570b7")
                                                                (idBoard . "51d99bbc1e1d8988390047f2")
                                                                (name .  "chapters")
                                                                (id .  "52c0b52ece09f28f6801fe5e")
                                                                (level . 2))))
              (expect "52c0b529bdbf2ab3770570b7" (orgtrello-data/entity-card-id actual-result))
              (expect "51d99bbc1e1d8988390047f2" (orgtrello-data/entity-board-id actual-result))
              (expect "chapters" (orgtrello-data/entity-name actual-result))
              (expect 2 (orgtrello-data/entity-level actual-result))
              (expect "52c0b52ece09f28f6801fe5e" (orgtrello-data/entity-id actual-result))
              (expect 2 (length (orgtrello-data/entity-items actual-result)))
              (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:position 16384 :name "introduction" :id "52c0b537ad469b9d6d044fa1" :checked "incomplete" :level 3))
                                    (first (orgtrello-data/entity-items actual-result))))
              (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:position 32768 :name "Ch. 1 - A scalable language" :id "52c0b5386548fde20105ea4e" :checked "incomplete" :level 3))
                                    (second (orgtrello-data/entity-items actual-result)))))

(expectations
 (expect :keyword (orgtrello-data/--deal-with-key :keyword))
 (expect :name    (orgtrello-data/--deal-with-key 'name))
 (expect nil      (orgtrello-data/--deal-with-key 'something-that-does-not-exist)))

(expectations
  (expect t (hash-equal
             #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data
                           (url :url id :id name :name idMembers :member-ids idList :list-id idChecklists :checklists idBoard :board-id due :due desc :desc closed :closed idCard :card-id checkItems :items state :checked status :status buffername :buffername sync :sync uri :uri method :method params :params action :action start :start callback :callback pos :position position :position keyword :keyword level :level member-ids :member-ids member :member memberships :memberships username :username fullName :full-name actions :comments labelNames :labels red :red yellow :yellow blue :blue green :green orange :orange purple :purple labels :labels color :color))
             *ORGTRELLO-DATA-MAP-KEYWORDS*)))

(expectations
  (expect 'orgtrello-data/--parse-actions (orgtrello-data/--dispatch-parse-data-fn ':comments))
  (expect 'orgtrello-data/parse-data (orgtrello-data/--dispatch-parse-data-fn ':something-else)))

(defvar partial-data-to-test '[((memberCreator (username . "ardumont")
                                               (initials . "AD")
                                               (fullName . "Antoine R. Dumont")
                                               (avatarHash . "ff242a6fbf51ccf70e4760b23e194bca")
                                               (id . "4f2baa2f72b7c1293501cad3"))
                                (date . "2014-03-22T11:30:15.358Z")
                                (type . "commentCard")
                                (data
                                 (text . "comment 4")
                                 (card
                                  (id . "532d6fd99e39209f27ab2d61")
                                  (name . "Joy of FUN(ctional) LANGUAGES")
                                  (idShort . 2733)
                                  (shortLink . "otLncD1l"))
                                 (board
                                  (id . "51d99bbc1e1d8988390047f2")
                                  (name . "api test board")
                                  (shortLink . "6JSsg3aG")))
                                (idMemberCreator . "4f2baa2f72b7c1293501cad3")
                                (id . "532d7447b247e3d24f365309"))
                               ((memberCreator
                                 (username . "ardumont")
                                 (initials . "AD")
                                 (fullName . "Antoine R. Dumont")
                                 (avatarHash . "ff242a6fbf51ccf70e4760b23e194bca")
                                 (id . "4f2baa2f72b7c1293501cad3"))
                                (date . "2014-03-22T11:30:09.927Z")
                                (type . "commentCard")
                                (data
                                 (text . "comment 3")
                                 (card
                                  (id . "532d6fd99e39209f27ab2d61")
                                  (name . "Joy of FUN(ctional) LANGUAGES")
                                  (idShort . 2733)
                                  (shortLink . "otLncD1l"))
                                 (board
                                  (id . "51d99bbc1e1d8988390047f2")
                                  (name . "api test board")
                                  (shortLink . "6JSsg3aG")))
                                (idMemberCreator . "4f2baa2f72b7c1293501cad3")
                                (id . "532d7441852414f343560757"))])

(expectations
  (expect t (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:comment-id "532d7447b247e3d24f365309" :comment-text "comment 4" :comment-user "ardumont"))
                (first (orgtrello-data/--parse-actions partial-data-to-test))))
  (expect t
    (hash-equal #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (:comment-id "532d7441852414f343560757" :comment-text "comment 3" :comment-user "ardumont"))
                (second (orgtrello-data/--parse-actions partial-data-to-test)))))

;; (ert-deftest testing-orgtrello-data/metadata! ()
;;   (let ((h-values (orgtrello-tests/with-temp-buffer ":PROPERTIES:
;; #+PROPERTY: orgtrello-user-ardumont some-user-id
;; #+PROPERTY: orgtrello-user-dude some-user-id2
;; :END:

;; * IN-PROGRESS card title
;; :PROPERTIES:
;; :orgtrello-id: some-id
;; :orgtrello-users: ardumont,dude
;; :orgtrello-card-comments: ardumont: this is some comments###dude: some other comment
;; :END:
;; some description\n"
;;                                                     (orgtrello-data/metadata!))))
;;     (should (equal (gethash :level h-values) 1))
;;     (should (equal (gethash :name h-values) "card title"))
;;     (should (equal (gethash :id h-values) "some-id"))
;;     (should (equal (gethash :due h-values) nil))
;;     (should (equal (gethash :desc h-values) "some-description"))
;;     (should (equal (gethash :comments h-values) "ardumont: this is some comments###dude: some other comments"))
;;     (should (equal (gethash :keywords h-values) "IN-PROGRESS"))))
