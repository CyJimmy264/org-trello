(require 'orgtrello-api)

(ert-deftest testing-get-boards ()
  (let ((h (get-boards)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/members/me/boards"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-get-board ()
  (let ((h (get-board :id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/boards/:id"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-get-cards ()
  (let ((h (get-cards :board-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/boards/:board-id/cards"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-get-card ()
  (let ((h (get-card :card-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/cards/:card-id"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-get-lists ()
  (let ((h (get-lists :board-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/boards/:board-id/lists"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-get-list ()
  (let ((h (get-list :list-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/lists/:list-id"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-add-list ()
  (let ((h (add-list "list-name" "board-id")))
    (should (equal (gethash :method h) :post))
    (should (equal (gethash :uri    h) "/lists/"))
    (should (equal (gethash :params h) '(("name" . "list-name")
                                         ("idBoard" . "board-id"))))))

(ert-deftest testing-add-card ()
  (let ((h (add-card "card-name" "list-id")))
    (should (equal (gethash :method h) :post))
    (should (equal (gethash :uri    h) "/cards/"))
    (should (equal (gethash :params h) '(("name" . "card-name") ("idList" . "list-id"))))))

(ert-deftest testing-get-cards ()
  (let ((h (get-cards :list-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/lists/:list-id/cards"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-move-card ()
  (let ((h (move-card :id-card :id-list "name-card")))
    (should (equal (gethash :method h) :put))
    (should (equal (gethash :uri    h) "/cards/:id-card"))
    (should (equal (gethash :params h) '(("name" . "name-card")
                                         ("idList" . :id-list))))))

(ert-deftest testing-move-card-without-name ()
  (let ((h (move-card :id-card :id-list)))
    (should (equal (gethash :method h) :put))
    (should (equal (gethash :uri    h) "/cards/:id-card"))
    (should (equal (gethash :params h) '(("idList" . :id-list))))))

(ert-deftest testing-add-checklist ()
  (let ((h (add-checklist "id-card" "name-checklist")))
    (should (equal (gethash :method h) :post))
    (should (equal (gethash :uri    h) "/cards/id-card/checklists"))
    (should (equal (gethash :params h) '(("name" . "name-checklist"))))))

(ert-deftest testing-get-checklists ()
  (let ((h (get-checklists :card-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/cards/:card-id/checklists"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-get-checklist ()
  (let ((h (get-checklist :checklist-id)))
    (should (equal (gethash :method h) :get))
    (should (equal (gethash :uri    h) "/checklists/:checklist-id"))
    (should (equal (gethash :params h) nil))))

(ert-deftest testing-add-tasks ()
  (let ((h (add-tasks "task-name" :checklist-id)))
    (should (equal (gethash :method h) :post))
    (should (equal (gethash :uri    h) "/checklists/:checklist-id/checkItems"))
    (should (equal (gethash :params h) '(("name" . "task-name"))))))

(ert-deftest testing-check-or-uncheck-states ()
  (let ((h (check-or-uncheck-tasks :card-id :checklist-id :task-id "incomplete")))
    (should (equal (gethash :method h) :put))
    (should (equal (gethash :uri    h) "/cards/:card-id/checklist/:checklist-id/checkItem/:task-id"))
    (should (equal (gethash :params h) '(("state" ."incomplete"))))))

(provide 'orgtrello-api-tests)

;;; orgtrello-api-tests.el end here
