This describes the current conventions for org-trello's development.

* Sources
  :PROPERTIES:
  :CUSTOM_ID: sources
  :END:

The sources are split into =namespaces= in the [[./src/][src/]] folder.
This is described in the Namespaces section below.

** Conventions
   :PROPERTIES:
   :CUSTOM_ID: conventions
   :END:

As there exists no namespace in emacs-lisp, I use: 

- convention in function names to determine the nature private/public 
- splitted files that represents namespaces.

*** Rules
    :PROPERTIES:
    :CUSTOM_ID: rules
    :END:

These conventions are enforced in org-trello:

- functions are prefixed with
  =orgtrello-<NAMESPACE-FILENAME>-<FUNCTION-NAME>=
- =<NAMESPACE-FILENAME>= is the filename without its path nor its
  extension. For example, =src/buffer.el= renders =buffer=
- =<FUNCTION-NAME>= is an alphanumeric symbol with =-= as separator. For
  example, =orgtrello-api-add-board= is a public function which does
  create a request to add a board.
- private functions are prefixed with =--=. For example,
  =orgtrello-api--deal-with-optional-values= which is a private utility
  function to help in creating api request.
- predicate functions are suffixed by =-p=. For example,
  =orgtrello-data-entity-card-p= which checks if the parameter entity is
  a card or not.

/Note:/ I adapted the code to abide by [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html][emacs-lisp's conventions]].

*** Exception
    :PROPERTIES:
    :CUSTOM_ID: exception
    :END:

=org-trello.el= is the main namespace that declares the:

- interactive commands used throughout all of org-trello 
- minor mode

Every exposed interactive command is named =org-trello-fn-name=.

** Namespaces
   :PROPERTIES:
   :CUSTOM_ID: namespaces
   :END:

The namespaces are in loading order:

| Namespaces file          | Description of the namespace                     |
|--------------------------+--------------------------------------------------|
| org-trello-log.el        | Provide log facilities                           |
| org-trello-setup.el      | Main variable definition that permits internal   |
|                          | … org-trello functions customization             |
| org-trello-date.el       | org-trello's date manipulation                   |
| org-trello-hash.el       | Hash-map manipulation utilities                  |
| org-trello-action.el     | Higher-order functions helper                    |
| org-trello-data.el       | Internal org-trello data manipulation            |
| org-trello-entity.el     | Entity (card/checklist/item) predicates          |
| org-trello-cbx.el        | Checkbox manipulation utilities                  |
| org-trello-api.el        | Trello API abstraction DSL                       |
| org-trello-query.el      | HTTP query utilities                             |
| org-trello-backend.el    | Deals with trello requests                       |
| org-trello-proxy.el      | Proxy utilities - Namespace in charge of dealing |
|                          | … with the orchestration of trello requests      |
| org-trello-buffer.el     | Buffer manipulation functions                    |
| org-trello-input.el      | Text input functions                             |
| org-trello-controller.el | Controller used by org-trello.el                 |
| org-trello-deferred.el   | Deferred computation in org-trello               |
| org-trello.el            | Main information about org-trello (version,      |
|                          | … licence, deps, etc...) + org-trello            |
|                          | … minor mode definition which defines            |
|                          | … interactive commands and the mode              |
|--------------------------+--------------------------------------------------|
| utilities.el             | test utilities functions                         |

** Loading
   :PROPERTIES:
   :CUSTOM_ID: loading
   :END:

Use the [[./load-org-trello.el][load-org-trello.el]] file to load org-trello for development
purposes and keep the emacs way of browsing source code (=M-.= ,
=M-,=).

Open the file and =M-x eval-buffer=.

* Makefile
  :PROPERTIES:
  :CUSTOM_ID: makefile
  :END:

The [[./Makefile][Makefile]] is your ally for: 
- package 
- test 
- release

** Package
   :PROPERTIES:
   :CUSTOM_ID: package
   :END:

This packages all the /org-trello*.el/ into a standard tar file.

#+BEGIN_SRC sh
    make package
#+END_SRC

** Test
   :PROPERTIES:
   :CUSTOM_ID: test
   :END:

#+BEGIN_SRC sh
    make test
#+END_SRC

** Install
   :PROPERTIES:
   :CUSTOM_ID: install
   :END:

To test that the package, once created, can be installed (using the
repository to fetch the dependencies).

#+BEGIN_SRC sh
    make install-file-with-deps-from-melpa
#+END_SRC

/Note:/ This will trigger the installation from a local package
=org-trello-<VERSION>.tar=. The installation is used with the
dependencies fetched from melpa.

/Note:/ These are the targets used by the CI (cf. [[./.travis.yml][.travis.yml]])

** Full install testing
   :PROPERTIES:
   :CUSTOM_ID: full-install-testing
   :END:

As we deploy in melpa, we can ensure that once delivered, the
installation is ok using those targets.

#+BEGIN_SRC sh
    make install-package-from-melpa
#+END_SRC

** Release
   :PROPERTIES:
   :CUSTOM_ID: release
   :END:

The release process is done through 2 steps:

1. Self Pull Request from the feature branch inside master

   #+BEGIN_SRC sh
       make pr
   #+END_SRC

   /Note:/ You need `hub` installed for this target to work.

2. Then trigger release through the call to the release target from the Makefile:

   #+BEGIN_SRC sh
       make release
   #+END_SRC

   This will:
   - fetch the latest modifications on your repository 
   - checkout the master branch
   - fast-forward to the latest master commit 
   - tag the latest commit from master using the $VERSION you submit to the
     script (defaulting to the version from the org-trello.el header)
   - push the tag to the upstream branch repository
   - trigger the package target from the Makefile (thus building a new package to the latest version)
   - Then manual delivery of the tar to the github release page

   /Note:/
   - this is an orchestration of the [[./release.sh][release.sh]] script 
   - the packaging for MELPA is automatically done from =org-trello/org-trello= repository
